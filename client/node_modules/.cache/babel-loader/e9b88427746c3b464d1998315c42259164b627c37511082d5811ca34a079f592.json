{"ast":null,"code":"// store.ts\n\nimport { makeAutoObservable } from \"mobx\";\nimport AuthService from \"../services/AuthService\";\nimport axios from \"axios\";\nimport { API_URL } from \"../http\";\nimport ProfileService from \"../services/ProfileService\";\nexport default class Store {\n  constructor() {\n    this.user = {};\n    this.isAuth = false;\n    this.isLoading = false;\n    this.grades = [];\n    this.profileId = null;\n    makeAutoObservable(this);\n  }\n  setAuth(bool) {\n    this.isAuth = bool;\n  }\n  setUser(user) {\n    this.user = user;\n    if (user.profileId) {\n      this.profileId = user.profileId;\n    }\n  }\n  setLoading(bool) {\n    this.isLoading = bool;\n  }\n  setGrades(grades) {\n    this.grades = grades;\n  }\n  getUserId() {\n    return this.user.id;\n  }\n  getProfileId() {\n    return this.profileId;\n  }\n  async login(email, password) {\n    try {\n      const response = await AuthService.login(email, password);\n      console.log(response);\n      localStorage.setItem('token', response.data.accessToken);\n      this.setAuth(true);\n      this.setUser(response.data.user);\n    } catch (e) {\n      var _e$response, _e$response$data;\n      console.log((_e$response = e.response) === null || _e$response === void 0 ? void 0 : (_e$response$data = _e$response.data) === null || _e$response$data === void 0 ? void 0 : _e$response$data.message);\n    }\n  }\n  async registration(email, password) {\n    try {\n      const response = await AuthService.registration(email, password);\n      console.log(response);\n      localStorage.setItem('token', response.data.accessToken);\n      this.setAuth(true);\n      this.setUser(response.data.user);\n    } catch (e) {\n      var _e$response2, _e$response2$data;\n      console.log((_e$response2 = e.response) === null || _e$response2 === void 0 ? void 0 : (_e$response2$data = _e$response2.data) === null || _e$response2$data === void 0 ? void 0 : _e$response2$data.message);\n    }\n  }\n  async logout() {\n    try {\n      await AuthService.logout();\n      localStorage.removeItem('token');\n      this.setAuth(false);\n      this.setUser({});\n    } catch (e) {\n      var _e$response3, _e$response3$data;\n      console.log((_e$response3 = e.response) === null || _e$response3 === void 0 ? void 0 : (_e$response3$data = _e$response3.data) === null || _e$response3$data === void 0 ? void 0 : _e$response3$data.message);\n    }\n  }\n  async checkAuth() {\n    this.setLoading(true);\n    try {\n      const response = await axios.get(`${API_URL}/refresh`, {\n        withCredentials: true\n      });\n      console.log(response);\n      localStorage.setItem('token', response.data.accessToken);\n      this.setAuth(true);\n      this.setUser(response.data.user);\n      await this.fetchProfileId(); // Вызываем метод для получения profileId\n    } catch (e) {\n      var _e$response4, _e$response4$data;\n      console.log((_e$response4 = e.response) === null || _e$response4 === void 0 ? void 0 : (_e$response4$data = _e$response4.data) === null || _e$response4$data === void 0 ? void 0 : _e$response4$data.message);\n    } finally {\n      this.setLoading(false);\n    }\n  }\n  async fetchProfileId() {\n    const profileId = this.getProfileId();\n    if (profileId) {\n      return; // Если profileId уже есть, ничего не делаем\n    }\n    const userId = this.getUserId();\n    if (userId) {\n      try {\n        const response = await ProfileService.fetchProfile(userId);\n        const userProfile = response.data;\n        if (userProfile && userProfile.profileId) {\n          this.profileId = userProfile.profileId;\n        }\n      } catch (error) {\n        console.error('Error fetching profile:', error);\n      }\n    }\n  }\n}","map":{"version":3,"names":["makeAutoObservable","AuthService","axios","API_URL","ProfileService","Store","constructor","user","isAuth","isLoading","grades","profileId","setAuth","bool","setUser","setLoading","setGrades","getUserId","id","getProfileId","login","email","password","response","console","log","localStorage","setItem","data","accessToken","e","_e$response","_e$response$data","message","registration","_e$response2","_e$response2$data","logout","removeItem","_e$response3","_e$response3$data","checkAuth","get","withCredentials","fetchProfileId","_e$response4","_e$response4$data","userId","fetchProfile","userProfile","error"],"sources":["E:/Diplom/client/src/store/store.ts"],"sourcesContent":["// store.ts\r\n\r\nimport { makeAutoObservable } from \"mobx\";\r\nimport { IUser } from \"../models/IUser\";\r\nimport AuthService from \"../services/AuthService\";\r\nimport axios from \"axios\";\r\nimport { AuthResponse } from \"../models/response/AuthResponse\";\r\nimport { API_URL } from \"../http\";\r\nimport { IGrade } from \"../models/IGrade\";\r\nimport ProfileService from \"../services/ProfileService\";\r\n\r\nexport default class Store {\r\n    user = {} as IUser;\r\n    isAuth = false;\r\n    isLoading = false;\r\n    grades: IGrade[] = [];\r\n    profileId: string | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    setAuth(bool: boolean) {\r\n        this.isAuth = bool;\r\n    }\r\n\r\n    setUser(user: IUser) {\r\n        this.user = user;\r\n        if (user.profileId) {\r\n            this.profileId = user.profileId;\r\n        }\r\n    }\r\n\r\n    setLoading(bool: boolean) {\r\n        this.isLoading = bool;\r\n    }\r\n\r\n    setGrades(grades: IGrade[]) {\r\n        this.grades = grades;\r\n    }\r\n\r\n    getUserId() {\r\n        return this.user.id;\r\n    }\r\n\r\n    getProfileId() {\r\n        return this.profileId;\r\n    }\r\n\r\n    async login(email: string, password: string) {\r\n        try {\r\n            const response = await AuthService.login(email, password);\r\n            console.log(response)\r\n            localStorage.setItem('token', response.data.accessToken);\r\n            this.setAuth(true);\r\n            this.setUser(response.data.user);\r\n        } catch (e: any) {\r\n            console.log(e.response?.data?.message);\r\n        }\r\n    }\r\n\r\n    async registration(email: string, password: string) {\r\n        try {\r\n            const response = await AuthService.registration(email, password);\r\n            console.log(response)\r\n            localStorage.setItem('token', response.data.accessToken);\r\n            this.setAuth(true);\r\n            this.setUser(response.data.user);\r\n        } catch (e: any) {\r\n            console.log(e.response?.data?.message);\r\n        }\r\n    }\r\n\r\n    async logout() {\r\n        try {\r\n            await AuthService.logout();\r\n            localStorage.removeItem('token');\r\n            this.setAuth(false);\r\n            this.setUser({} as IUser);\r\n        } catch (e: any) {\r\n            console.log(e.response?.data?.message);\r\n        }\r\n    }\r\n\r\n    async checkAuth() {\r\n        this.setLoading(true);\r\n        try {\r\n            const response = await axios.get<AuthResponse>(`${API_URL}/refresh`, { withCredentials: true });\r\n            console.log(response);\r\n            localStorage.setItem('token', response.data.accessToken);\r\n            this.setAuth(true);\r\n            this.setUser(response.data.user);\r\n            await this.fetchProfileId(); // Вызываем метод для получения profileId\r\n        } catch (e: any) {\r\n            console.log(e.response?.data?.message);\r\n        } finally {\r\n            this.setLoading(false);\r\n        }\r\n    }\r\n\r\n    async fetchProfileId() {\r\n        const profileId = this.getProfileId();\r\n        if (profileId) {\r\n            return; // Если profileId уже есть, ничего не делаем\r\n        }\r\n        const userId = this.getUserId();\r\n        if (userId) {\r\n            try {\r\n                const response = await ProfileService.fetchProfile(userId);\r\n                const userProfile = response.data;\r\n                if (userProfile && userProfile.profileId) {\r\n                    this.profileId = userProfile.profileId;\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching profile:', error);\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}